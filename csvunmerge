#!/usr/bin/python3
import csv
import sys
import argparse
import re
from collections import deque


def main():
  args = parse_args()
  p = Processor(args)
  p.process()


def parse_args():
  p = argparse.ArgumentParser()
  p.add_argument('file', metavar='FILE', type=argparse.FileType('r'), nargs='?',
    default=sys.stdin,
    help='input filename (default to STDIN)')
  p.add_argument('-u', '--unmerge', metavar='COL', dest='unmerge_index',
    type=int, required=True,
    help='column index to be parsed (unmerged)')
  p.add_argument('-l', '--left-paren', default=' (',
    help='left parenthesis (default to " (")')
  p.add_argument('-r', '--right-paren', default=')',
    help='right parenthesis (default to ")")')
  p.add_argument('-c', '--comma', default=', ',
    help='comma (default to ", ")')
  p.add_argument('-t', '--trim', action='store_true',
    help='trim parsed (unmerged) columns')
  return p.parse_args()


class Processor(object):

  def __init__(self, args):
    for k in ['file', 'unmerge_index', 'left_paren', 'comma', 'right_paren',
        'trim']:
      setattr(self, k, getattr(args, k))
    self.extracted_col_rows_p = re.compile('({}|{}|{})'.format(re.escape(
      self.left_paren), re.escape(self.comma), re.escape(self.right_paren)))

  def process(self):
    reader = csv.reader(self.file)
    result = []
    for row in reader:
      extracted = self.extracted_col_rows(row[self.unmerge_index])
      new_rows = self.stamped_rows(row, self.unmerge_index, extracted)
      result.extend(new_rows)

    writer = csv.writer(sys.stdout)
    writer.writerows(result)

  def stamped_rows(self, mail_row, index, label_rows):
    """Duplicate mail for each label, stamp each label at index"""
    return (mail_row[:index] + label_row + mail_row[index+1:]
      for label_row in label_rows)

  def extracted_col_rows(self, s):
    """Extract (parse) a column into rows of columns"""
    tokens = re.split(self.extracted_col_rows_p, s + self.right_paren)
    stack = deque()
    prev = None
    for token in tokens:
      if token == self.left_paren:
        prev = token
      elif token == self.comma or token == self.right_paren:
        if prev == 0:
          row = list(stack)
          yield row
        stack.pop()
        prev = token
      elif prev != self.right_paren:
        stack.append(token.strip() if self.trim else token)
        prev = 0


if __name__ == '__main__':
  main()

# fikr4n 2015
