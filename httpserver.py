#!/usr/bin/python3
import cgi
import html
import io
import sys
import os
import urllib.parse
import shutil
from http import server


class TheHandler(server.SimpleHTTPRequestHandler):
  
  allow_overwrite = False
  allow_upload = True

  def do_POST(self):
    ok = True
    try:
      if not self.allow_upload:
        raise Exception('Upload is not enabled')
        
      ctype, pdict = cgi.parse_header(self.headers['Content-type'])
      clength = int(self.headers['Content-length'])
      multipart = cgi.FieldStorage(self.rfile, self.headers,
        limit=clength, environ={'REQUEST_METHOD': 'POST'})
      upload = multipart['upload']
      filename = os.path.join(self.path[1:], upload.filename)
      if os.path.lexists(filename):
        if not self.allow_overwrite:
          raise Exception('File exists: ' + filename)
        else:
          self.log_message('upload to %s (overwrite existing file)',
            os.path.abspath(filename))
      else:
        self.log_message('upload to %s', os.path.abspath(filename))
      with open(filename, 'wb') as of:
        shutil.copyfileobj(upload.file, of)
    except Exception as e:
      ok = False
      self.send_response(400)
      self.end_headers()
      self.wfile.write('<h3>An error occured</h3><pre>{}</pre>'.format(e).
        encode())
      raise 

    if ok:
      self.send_response(303)
      self.send_header('Location', self.path)
      self.end_headers()
      self.wfile.write(b'<h3>File received</h3>')

  def list_directory(self, path):
    try:
        list = os.listdir(path)
    except os.error:
        self.send_error(404, "No permission to list directory")
        return None
    list.sort(key=lambda a: a.lower())
    r = []
    displaypath = html.escape(urllib.parse.unquote(self.path))
    r.append('<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">')
    r.append("<html>\n<title>Directory listing for %s</title>\n" % displaypath)
    r.append("<body>\n<h2>Directory listing for %s</h2>\n" % displaypath)
    r.append("<hr>\n<ul>\n")
    for name in list:
        fullname = os.path.join(path, name)
        displayname = linkname = name
        # Append / for directories or @ for symbolic links
        if os.path.isdir(fullname):
            displayname = name + "/"
            linkname = name + "/"
        if os.path.islink(fullname):
            displayname = name + "@"
            # Note: a link to a directory displays with @ and links with /
        r.append('<li><a href="%s">%s</a>\n'
                % (urllib.parse.quote(linkname), html.escape(displayname)))
    r.append("</ul>\n<hr>\n")
    r.append("""<h2>Upload</h2>
      <form action="." method="POST" enctype="multipart/form-data">
      <input type="file" name="upload"/>
      <input type="submit" name="submit" value="Upload"/>
      </form>""")
    if not self.allow_upload:
    	r.append("<p>Upload is <i>actually</i> disabled</p>")
    r.append("</body>\n</html>\n")
    enc = sys.getfilesystemencoding()
    encoded = ''.join(r).encode(enc)
    f = io.BytesIO()
    f.write(encoded)
    f.seek(0)
    self.send_response(200)
    self.send_header("Content-type", "text/html; charset=%s" % enc)
    self.send_header("Content-Length", str(len(encoded)))
    self.end_headers()
    return f


def parse_args():
  import argparse
  p = argparse.ArgumentParser(description='Simple HTTP server to GET from and POST to CWD where this program run.')
  p.add_argument('-p', '--port', type=int, default=9876,
    help='port number (default to 9876)')
  p.add_argument('-w', '--overwrite', action='store_true',
    help='overwrite if uploaded file exists')
  p.add_argument('-d', '--no-upload', action='store_true',
    help='download only, disable upload')
  a = p.parse_args()
  return a


def main():
  args = parse_args()
  TheHandler.allow_overwrite = args.overwrite
  TheHandler.allow_upload = not args.no_upload

  httpd = server.HTTPServer(('', args.port), TheHandler)
  try:
    print('Starting at directory {} port {}...'.format(os.getcwd(), args.port))
    httpd.serve_forever()
  except KeyboardInterrupt:
    print('Shutting down...')
    httpd.server_close()


if __name__ == '__main__':
  main()

# fikr4n 2015
